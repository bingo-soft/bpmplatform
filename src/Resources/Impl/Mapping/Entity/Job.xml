<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Jabe\Impl\Persistence\Entity\JobEntity">

  <!-- JOB DELETE STATEMENTS-->

  <delete id="deleteJob" parameterType="Jabe\Impl\Persistence\Entity\JobEntity">
    delete from ${prefix}ACT_RU_JOB where ID_ = #{id} and REV_ = #{revision}
  </delete>

  <delete id="deleteTimer" parameterType="Jabe\Impl\Persistence\Entity\JobEntity">
    delete from ${prefix}ACT_RU_JOB where ID_ = #{id} and REV_ = #{revision}
  </delete>

  <delete id="deleteMessage" parameterType="Jabe\Impl\Persistence\Entity\JobEntity">
    delete from ${prefix}ACT_RU_JOB where ID_ = #{id} and REV_ = #{revision}
  </delete>

  <delete id="deleteEverLivingJob" parameterType="Jabe\Impl\Persistence\Entity\JobEntity">
    delete from ${prefix}ACT_RU_JOB where ID_ = #{id} and REV_ = #{revision}
  </delete>

  <!-- JOB UPDATE STATEMENTS-->

  <update id="updateJobSuspensionStateByParameters" parameterType="Jabe\Impl\Db\ListQueryParameterObject">
    update ${prefix}ACT_RU_JOB set
      REV_ = 1 + REV_ ,
      SUSPENSION_STATE_ = #{parameter.suspensionState}
    <where>
      <if test="parameter.jobId != null">
        ID_ = #{parameter.jobId:VARCHAR}
      </if>
      <if test="parameter.jobDefinitionId != null">
        and JOB_DEF_ID_ = #{parameter.jobDefinitionId:VARCHAR}
      </if>
      <if test="parameter.processInstanceId != null">
        and PROCESS_INSTANCE_ID_ = #{parameter.processInstanceId:VARCHAR}
      </if>
      <if test="parameter.processDefinitionId != null">
        and PROCESS_DEF_ID_ = #{parameter.processDefinitionId:VARCHAR}
      </if>
      <if test="parameter.processDefinitionKey != null">
        <if test="!parameter.isProcessDefinitionTenantIdSet">
          and PROCESS_DEF_KEY_ = #{parameter.processDefinitionKey:VARCHAR}
        </if>
        <if test="parameter.isProcessDefinitionTenantIdSet">
          and PROCESS_DEF_ID_ IN (
            SELECT ID_ 
            FROM ${prefix}ACT_RE_PROCDEF PD
            WHERE PD.KEY_ = #{parameter.processDefinitionKey:VARCHAR}
            <if test="parameter.processDefinitionTenantId != null">
              and PD.TENANT_ID_ = #{parameter.processDefinitionTenantId:VARCHAR}
            </if>
            <if test="parameter.processDefinitionTenantId == null">
              and PD.TENANT_ID_ is null
            </if>
          )
        </if>
        <bind name="columnPrefix" value="''"/>
        <include refid="Jabe\Impl\Persistence\Entity\TenantEntity.queryTenantCheckWithPrefix" />
      </if>
      <if test="parameter.handlerType != null">
        and HANDLER_TYPE_ =  #{parameter.handlerType:VARCHAR}
      </if>
    </where>
  </update>

  <update id="updateFailedJobRetriesByParameters" parameterType="array">
    update ${prefix}ACT_RU_JOB set
      REV_ = 1 + REV_ ,
      LOCK_OWNER_ = NULL,
      LOCK_EXP_TIME_ = NULL,
      RETRIES_ = #{retries}
    <where>
      RETRIES_ = 0
      <if test="jobDefinitionId != null">
        and JOB_DEF_ID_ = #{jobDefinitionId:VARCHAR}
      </if>
    </where>
  </update>

  <update id="updateJobPriorityByDefinitionId" parameterType="array">
    <!-- this does not increment revision; it is ok if this update is overwritten by parallel operations -->
    update ${prefix}ACT_RU_JOB set
      PRIORITY_ = #{priority}
    where
      JOB_DEF_ID_ = #{jobDefinitionId:VARCHAR}
  </update>

  <!-- JOB RESULTMAP (FOR TIMER AND MESSAGE) -->

  <resultMap id="jobResultMap" type="Jabe\Impl\Persistence\Entity\JobEntity">
    <id property="id" column="ID_" dbalType="VARCHAR" />
    <result property="revision" column="REV_" dbalType="INTEGER" />
    <result property="lockOwner" column="LOCK_OWNER_" dbalType="VARCHAR" />
    <result property="lockExpirationTime" column="LOCK_EXP_TIME_" dbalType="VARCHAR" />
    <result property="exclusive" column="EXCLUSIVE_" dbalType="BOOLEAN" />
    <result property="executionId" column="EXECUTION_ID_" dbalType="VARCHAR" />
    <result property="processInstanceId" column="PROCESS_INSTANCE_ID_" dbalType="VARCHAR" />
    <result property="processDefinitionId" column="PROCESS_DEF_ID_" dbalType="VARCHAR" />
    <result property="processDefinitionKey" column="PROCESS_DEF_KEY_" dbalType="VARCHAR" />
    <result property="retriesFromPersistence" column="RETRIES_" dbalType="INTEGER" />
    <result property="exceptionByteArrayId" column="EXCEPTION_STACK_ID_" dbalType="VARCHAR" />
    <result property="failedActivityId" column="FAILED_ACT_ID_" dbalType="VARCHAR" />
    <result property="exceptionMessage" column="EXCEPTION_MSG_" dbalType="VARCHAR" />
    <result property="duedate" column="DUEDATE_" dbalType="VARCHAR" />
    <result property="jobHandlerType" column="HANDLER_TYPE_" dbalType="VARCHAR" />
    <result property="jobHandlerConfigurationRaw" column="HANDLER_CFG_" dbalType="VARCHAR" />
    <result property="deploymentId" column="DEPLOYMENT_ID_" dbalType="VARCHAR" />
    <result property="suspensionState" column="SUSPENSION_STATE_" dbalType="INTEGER"/>
    <result property="jobDefinitionId" column="JOB_DEF_ID_" dbalType="VARCHAR" />
    <result property="priority" column="PRIORITY_" dbalType="BIGINT" />
    <result property="tenantId" column="TENANT_ID_" dbalType="VARCHAR" />
    <result property="createTime" column="CREATE_TIME_" dbalType="VARCHAR" />
    <result property="sequenceCounter" column="SEQUENCE_COUNTER_" dbalType="BIGINT" />
    <result property="lastFailureLogId" column="LAST_FAILURE_LOG_ID_" dbalType="VARCHAR" />
    <discriminator phpType="string" column="TYPE_">
      <case value="message" resultMap="messageResultMap"/>
      <case value="timer" resultMap="timerResultMap"/>
      <case value="ever-living" resultMap="everLivingJobResultMap"/>
    </discriminator>
  </resultMap>

  <resultMap id="messageResultMap" type="Jabe\Impl\Persistence\Entity\MessageEntity" extends="jobResultMap"/>

  <resultMap id="everLivingJobResultMap" type="Jabe\Impl\Persistence\Entity\EverLivingJobEntity" extends="jobResultMap"/>

  <resultMap id="timerResultMap" type="Jabe\Impl\Persistence\Entity\TimerEntity" extends="jobResultMap">
    <result property="repeat" column="REPEAT_" dbalType="VARCHAR" />
    <result property="repeatOffset" column="REPEAT_OFFSET_" dbalType="BIGINT" />
  </resultMap>

  <resultMap id="acquirableJobResultMap" type="Jabe\Impl\Persistence\Entity\AcquirableJobEntity">
    <id property="id" column="ID_" dbalType="VARCHAR" />
    <result property="revision" column="REV_" dbalType="INTEGER" />
    <result property="duedate" column="DUEDATE_" dbalType="VARCHAR" />
    <result property="processInstanceId" column="PROCESS_INSTANCE_ID_" dbalType="VARCHAR" />
    <result property="exclusive" column="EXCLUSIVE_" dbalType="BOOLEAN" />
  </resultMap>

  <resultMap type="Jabe\Impl\Util\ImmutablePair" id="deploymentIdMapping">
    <id property="left" column="DEPLOYMENT_ID_" dbalType="VARCHAR" />
    <id property="right" column="ID_" dbalType="VARCHAR" />
  </resultMap>


  <!-- JOB SELECT (FOR TIMER AND MESSAGE) -->

  <select id="selectJob" parameterType="string" resultMap="jobResultMap">
    select * from ${prefix}ACT_RU_JOB where ID_ = #{id}
  </select>

  <select id="selectNextJobsToExecute" parameterType="Jabe\Impl\Db\ListQueryParameterObject" resultMap="acquirableJobResultMap">
    <bind name="orderingProperties" value="parameter.orderingProperties" />
    <include refid="src/Resources/Impl/Mapping/Entity/Commons.bindOrderBy"/>
    ${limitBefore}
    select RES.ID_,
      RES.REV_,
      RES.DUEDATE_,
      RES.PROCESS_INSTANCE_ID_,
      RES.EXCLUSIVE_
    ${limitBetweenAcquisition}
    from ${prefix}ACT_RU_JOB RES

    where (RES.RETRIES_ &gt; 0)
      and (
      <if test="!parameter.alwaysSetDueDate">
          RES.DUEDATE_ is null or
      </if>
          RES.DUEDATE_ &lt;= #{parameter.now:VARCHAR}
      )
      and (RES.LOCK_OWNER_ is null or RES.LOCK_EXP_TIME_ &lt; #{parameter.now:VARCHAR})
      and RES.SUSPENSION_STATE_ = 1

      <if test="parameter.deploymentAware">
        and (RES.DEPLOYMENT_ID_ is null
        <if test="!empty(parameter.deploymentIds)">
          or
          <bind name="listOfIds" value="parameter.deploymentIds"/>
          <bind name="fieldName" value="'RES.DEPLOYMENT_ID_'"/>
          <include refid="src/Resources/Impl/Mapping/Entity/Commons.applyInForPaginatedCollection"/>
        </if>
        )
      </if>

      <if test="parameter.jobPriorityMin != null">
        and RES.PRIORITY_ &gt;= #{parameter.jobPriorityMin}
      </if>
      <if test="parameter.jobPriorityMax != null">
        and RES.PRIORITY_ &lt;= #{parameter.jobPriorityMax}
      </if>

      and (<include refid="AtomicExclusiveOrNonExclusiveJobs"/>)

      <if test="!parameter.historyCleanupEnabled">
        and HANDLER_TYPE_ != 'history-cleanup'
      </if>

    <if test="parameter.applyOrdering">
      ${orderBy}
    </if>
    ${limitAfter}
  </select>

  <sql id="AtomicExclusiveOrNonExclusiveJobs">
    (<include refid="AtomicExclusiveJobs"/>)
    or
    <include refid="NonExclusiveJobs"/>
  </sql>

  <sql id="AtomicExclusiveJobs">
    RES.EXCLUSIVE_ = ${trueConstant}
          and not exists(
            select J2.ID_ from ${prefix}ACT_RU_JOB J2
            where J2.PROCESS_INSTANCE_ID_ = RES.PROCESS_INSTANCE_ID_                                           -- from the same proc. inst.
            and (J2.EXCLUSIVE_ = ${trueConstant})                                                              -- also exclusive
            and (J2.LOCK_OWNER_ is not null and J2.LOCK_EXP_TIME_ &gt;= #{parameter.now:VARCHAR})  -- in progress
            )
  </sql>

  <sql id="NonExclusiveJobs">
    RES.EXCLUSIVE_ = ${falseConstant}
  </sql>

  <select id="selectJobsByConfiguration" parameterType="Jabe\Impl\Db\ListQueryParameterObject" resultMap="jobResultMap">
      select * from ${prefix}ACT_RU_JOB
      where HANDLER_TYPE_ = #{parameter.handlerType}
      <if test="parameter.tenantId != null">
        and TENANT_ID_ = #{parameter.tenantId}
      </if>
      <if test="parameter.tenantId == null">
        and TENANT_ID_ is null
      </if>
      and (HANDLER_CFG_ = #{parameter.handlerConfiguration:VARCHAR}
      <if test="parameter.handlerConfigurationWithFollowUpJobCreatedProperty != null">
      or HANDLER_CFG_ = #{parameter.handlerConfigurationWithFollowUpJobCreatedProperty:VARCHAR}
      </if>)
  </select>

    <select id="selectJobsByHandlerType" parameterType="Jabe\Impl\Db\ListQueryParameterObject" resultMap="jobResultMap" flushCache="true">
        select * from ${prefix}ACT_RU_JOB
        where HANDLER_TYPE_ = #{parameter}
    </select>

  <select id="selectJobsByExecutionId" parameterType="Jabe\Impl\Db\ListQueryParameterObject" resultMap="jobResultMap">
    select *
    from ${prefix}ACT_RU_JOB J
    where J.EXECUTION_ID_ = #{parameter}
  </select>

  <select id="selectJobsByProcessInstanceId" parameterType="Jabe\Impl\Db\ListQueryParameterObject" resultMap="jobResultMap">
    select *
    from ${prefix}ACT_RU_JOB J
    where J.PROCESS_INSTANCE_ID_ = #{parameter}
  </select>

  <select id="selectJobsByJobDefinitionId" parameterType="Jabe\Impl\Db\ListQueryParameterObject" resultMap="jobResultMap">
    select *
    from ${prefix}ACT_RU_JOB J
    where J.JOB_DEF_ID_ = #{parameter}
  </select>

  <select id="selectJobByQueryCriteria" parameterType="Jabe\Impl\JobQueryImpl" resultMap="jobResultMap">
  	<include refid="src/Resources/Impl/Mapping/Entity/Commons.bindOrderBy"/>
    ${limitBefore}
    select ${distinct} RES.*
    ${limitBetween}
    <include refid="selectJobByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </select>

  <select id="selectJobCountByQueryCriteria" parameterType="Jabe\Impl\JobQueryImpl" resultType="integer">
    ${countDistinctBeforeStart} RES.ID_ ${countDistinctBeforeEnd}
    <include refid="selectJobByQueryCriteriaSql"/>
    ${countDistinctAfterEnd}
  </select>

  <select id="selectJobDeploymentIdMappingsByQueryCriteria" parameterType="Jabe\Impl\JobQueryImpl" resultMap="deploymentIdMapping">
    select distinct RES.DEPLOYMENT_ID_, RES.ID_
    <include refid="selectJobByQueryCriteriaSql"/>
    ORDER BY RES.DEPLOYMENT_ID_ ASC
  </select>

  <sql id="selectJobByQueryCriteriaSql">
    from ${prefix}ACT_RU_JOB RES
    <if test="executable">
        LEFT OUTER JOIN ${prefix}ACT_RU_EXECUTION PI ON PI.ID_ = RES.PROCESS_INSTANCE_ID_
    </if>
    <if test="activityId != null">
      LEFT OUTER JOIN ${prefix}ACT_RU_JOBDEF JD ON JD.ID_ = RES.JOB_DEF_ID_
    </if>
    <where>
      <if test="id != null">
        RES.ID_ = #{id}
      </if>
      <if test="!empty(ids)">
        <bind name="listOfIds" value="ids" />
        <bind name="fieldName" value="'RES.ID_'" />
        <include refid="src/Resources/Impl/Mapping/Entity/Commons.applyInForPaginatedCollection" />
      </if>
      <if test="jobDefinitionId != null">
        RES.JOB_DEF_ID_ = #{jobDefinitionId}
      </if>
      <if test="activityId != null">
      	JD.ACT_ID_ = #{activityId}
      </if>
      <if test="processInstanceId != null">
        and RES.PROCESS_INSTANCE_ID_ = #{processInstanceId}
      </if>
      <if test="!empty(processInstanceIds)">
        <bind name="listOfIds" value="processInstanceIds" />
        <bind name="fieldName" value="'RES.PROCESS_INSTANCE_ID_'" />
        <include refid="src/Resources/Impl/Mapping/Entity/Commons.applyInForPaginatedCollection" />
      </if>
      <if test="executionId != null">
        and RES.EXECUTION_ID_ = #{executionId}
      </if>
      <if test="processDefinitionId != null">
        and RES.PROCESS_DEF_ID_ = #{processDefinitionId}
      </if>
      <if test="processDefinitionKey != null">
        and RES.PROCESS_DEF_KEY_ = #{processDefinitionKey}
      </if>
      <if test="retriesLeft">
        and RES.RETRIES_ > 0
      </if>
      <if test="executable">
        and (RES.RETRIES_ > 0)
        and (RES.DUEDATE_ is null or RES.DUEDATE_ &lt;= #{now:VARCHAR})
        and (
            (RES.EXECUTION_ID_ is null)
            or
            (PI.SUSPENSION_STATE_ = 1 or PI.SUSPENSION_STATE_ is null)
      )
      </if>
      <if test="onlyTimers">
        and RES.TYPE_ = 'timer'
      </if>
      <if test="onlyMessages">
        and RES.TYPE_ = 'message'
      </if>
      <if test="duedateHigherThan != null">
        and RES.DUEDATE_ &gt; #{duedateHigherThan}
      </if>
      <if test="duedateLowerThan != null">
        and RES.DUEDATE_ &lt; #{duedateLowerThan}
      </if>
      <if test="duedateHigherThanOrEqual != null">
        and RES.DUEDATE_ &gt;= #{duedateHigherThanOrEqual}
      </if>
      <if test="duedateLowerThanOrEqual != null">
        and RES.DUEDATE_ &lt;= #{duedateLowerThanOrEqual}
      </if>
      <if test="createdAfter != null">
        and RES.CREATE_TIME_ &gt; #{createdAfter}
      </if>
      <if test="createdBefore != null">
        and RES.CREATE_TIME_ &lt;= #{createdBefore}
      </if>
      <if test="priorityHigherThanOrEqual != null">
        and RES.PRIORITY_ &gt;= #{priorityHigherThanOrEqual}
      </if>
      <if test="priorityLowerThanOrEqual != null">
        and RES.PRIORITY_ &lt;= #{priorityLowerThanOrEqual}
      </if>
      <if test="withException">
      	and (RES.EXCEPTION_MSG_ is not null or RES.EXCEPTION_STACK_ID_ is not null)
      </if>
      <if test="exceptionMessage">
      	and RES.EXCEPTION_MSG_ = #{exceptionMessage}
      </if>
      <if test="failedActivityId != null">
        and RES.FAILED_ACT_ID_ = #{failedActivityId}
      </if>
      <if test="noRetriesLeft">
        and RES.RETRIES_ = 0
      </if>
      <if test="suspensionState != null">
        and RES.SUSPENSION_STATE_ = #{suspensionState.stateCode}
      </if>
      <if test="isTenantIdSet">
        <if test="!empty(tenantIds)">
          and ( RES.TENANT_ID_ in
          <foreach item="tenantId" index="index" collection="tenantIds"
                   open="(" separator="," close=")">
            #{tenantId}
          </foreach>
          <if test="includeJobsWithoutTenantId">
            or RES.TENANT_ID_ is null
          </if>
          )
        </if>
        <if test="empty(tenantIds)">
          and RES.TENANT_ID_ is null
        </if>
      </if>

      <if test="authCheck.shouldPerformAuthorizatioCheck and authCheck.authUserId != null">
        AND
          ( CASE

            WHEN
              RES.PROCESS_DEF_KEY_ is not null
            THEN
              (
              <bind name="authUserId" value="authCheck.authUserId" />
              <bind name="authGroupIds" value="authCheck.authGroupIds" />
              <bind name="revokeAuthorizationCheckEnabled" value="authCheck.revokeAuthorizationCheckEnabled" />
              <bind name="permissionChecks" value="authCheck.permissionChecks" />
              <include refid="Jabe\Impl\Persistence\Entity\AuthorizationEntity.authorizationCheck" />)

            ELSE
              <!-- "standalone" job (e.g. job to activate/suspend a process definition etc.) -->
              1
          END ) = 1
      </if>

      <include refid="Jabe\Impl\Persistence\Entity\TenantEntity.queryTenantCheck" />

    </where>
  </sql>

  <!-- TIMER INSERT -->

  <insert id="insertTimer" parameterType="Jabe\Impl\Persistence\Entity\TimerEntity">
    insert into ${prefix}ACT_RU_JOB (
            ID_,
            TYPE_,
            LOCK_OWNER_,
            LOCK_EXP_TIME_,
            EXCLUSIVE_,
            EXECUTION_ID_,
            PROCESS_INSTANCE_ID_,
            PROCESS_DEF_ID_,
            PROCESS_DEF_KEY_,
            RETRIES_,
            EXCEPTION_STACK_ID_,
            EXCEPTION_MSG_,
            FAILED_ACT_ID_,
            DUEDATE_,
            REPEAT_,
            REPEAT_OFFSET_,
            HANDLER_TYPE_,
            HANDLER_CFG_,
            DEPLOYMENT_ID_,
            SUSPENSION_STATE_,
            JOB_DEF_ID_,
            PRIORITY_,
            SEQUENCE_COUNTER_,
            TENANT_ID_,
            CREATE_TIME_,
            REV_
          )
    values (#{id:VARCHAR},
            'timer',
            #{lockOwner:VARCHAR},
            #{lockExpirationTime:VARCHAR},
            #{exclusive},
            #{executionId:VARCHAR},
            #{processInstanceId:VARCHAR},
            #{processDefinitionId:VARCHAR},
            #{processDefinitionKey:VARCHAR},
            #{retries},
            #{exceptionByteArrayId:VARCHAR},
            #{exceptionMessage:VARCHAR},
            #{failedActivityId:VARCHAR},
            #{duedate:VARCHAR},
            #{repeat:VARCHAR},
            #{repeatOffset},
            #{jobHandlerType:VARCHAR},
            #{jobHandlerConfigurationRaw:VARCHAR},
            #{deploymentId:VARCHAR},
            #{suspensionState},
            #{jobDefinitionId:VARCHAR},
            #{priority},
            #{sequenceCounter},
            #{tenantId:VARCHAR},
            #{createTime:VARCHAR},
            1
    )
  </insert>

  <!-- TIMER UPDATE -->

  <update id="updateTimer" parameterType="Jabe\Impl\Persistence\Entity\TimerEntity">
    update ${prefix}ACT_RU_JOB
    <set>
       REV_ =  #{revisionNext},
       EXECUTION_ID_ = #{executionId:VARCHAR},
       LOCK_EXP_TIME_ = #{lockExpirationTime:VARCHAR},
       LOCK_OWNER_ = #{lockOwner:VARCHAR},
       RETRIES_ = #{retries},
       EXCEPTION_STACK_ID_ = #{exceptionByteArrayId:VARCHAR},
       EXCEPTION_MSG_ = #{exceptionMessage:VARCHAR},
       FAILED_ACT_ID_ = #{failedActivityId:VARCHAR},
       DUEDATE_ = #{duedate:VARCHAR},
       REPEAT_ = #{repeat:VARCHAR},
       REPEAT_OFFSET_ = #{repeatOffset},
       SUSPENSION_STATE_ = #{suspensionState},
       PROCESS_DEF_ID_ = #{processDefinitionId:VARCHAR},
       PROCESS_DEF_KEY_ = #{processDefinitionKey:VARCHAR},
       JOB_DEF_ID_ = #{jobDefinitionId:VARCHAR},
       DEPLOYMENT_ID_ = #{deploymentId:VARCHAR},
       HANDLER_CFG_ = #{jobHandlerConfigurationRaw:VARCHAR},
       PRIORITY_ = #{priority},
       SEQUENCE_COUNTER_ = #{sequenceCounter},
       LAST_FAILURE_LOG_ID_ = #{lastFailureLogId:VARCHAR}
    </set>
    where ID_= #{id:VARCHAR}
      and REV_ = #{revision}
  </update>

  <!-- TIMER SELECT -->

  <select id="selectUnlockedTimersByDuedate" parameterType="Jabe\Impl\Db\ListQueryParameterObject" resultMap="jobResultMap">
    select *
    from ${prefix}ACT_RU_JOB
    where (TYPE_ = 'timer')
      and (DUEDATE_ is not null)
      and (DUEDATE_ &lt; #{parameter:VARCHAR})
      and (LOCK_OWNER_ is null or LOCK_EXP_TIME_ &lt; #{parameter:VARCHAR})
      and (RETRIES_  > 0)
    order by DUEDATE_
  </select>

  <select id="selectTimersByExecutionId" parameterType="Jabe\Impl\Db\ListQueryParameterObject" resultMap="jobResultMap">
    select *
    from ${prefix}ACT_RU_JOB
    where (RETRIES_ > 0)
      and (TYPE_ = 'timer')
      and (EXECUTION_ID_ = #{parameter})
  </select>

  <!-- MESSAGE INSERT -->

  <insert id="insertMessage" parameterType="Jabe\Impl\Persistence\Entity\MessageEntity">
    insert into ${prefix}ACT_RU_JOB (
            ID_,
            TYPE_,
            LOCK_OWNER_,
            LOCK_EXP_TIME_,
            EXCLUSIVE_,
            EXECUTION_ID_,
            PROCESS_INSTANCE_ID_,
            PROCESS_DEF_ID_,
            PROCESS_DEF_KEY_,
            RETRIES_,
            EXCEPTION_STACK_ID_,
            EXCEPTION_MSG_,
            FAILED_ACT_ID_,
            DUEDATE_,
            HANDLER_TYPE_,
            HANDLER_CFG_,
            DEPLOYMENT_ID_,
            SUSPENSION_STATE_,
            JOB_DEF_ID_,
            PRIORITY_,
            SEQUENCE_COUNTER_,
            TENANT_ID_,
            CREATE_TIME_,
            REV_
            )
    values (#{id:VARCHAR},
            'message',
            #{lockOwner:VARCHAR},
            #{lockExpirationTime:VARCHAR},
            #{exclusive},
            #{executionId:VARCHAR},
            #{processInstanceId:VARCHAR},
            #{processDefinitionId:VARCHAR},
            #{processDefinitionKey:VARCHAR},
            #{retries},
            #{exceptionByteArrayId:VARCHAR},
            #{exceptionMessage:VARCHAR},
            #{failedActivityId:VARCHAR},
            #{duedate:VARCHAR},
            #{jobHandlerType:VARCHAR},
            #{jobHandlerConfigurationRaw:VARCHAR},
            #{deploymentId:VARCHAR},
            #{suspensionState},
            #{jobDefinitionId:VARCHAR},
            #{priority},
            #{sequenceCounter},
            #{tenantId:VARCHAR},
            #{createTime:VARCHAR},
            1
    )
  </insert>
  <!-- MESSAGE UPDATE -->

  <update id="updateMessage" parameterType="Jabe\Impl\Persistence\Entity\MessageEntity">
    update ${prefix}ACT_RU_JOB
    <set>
       REV_ =  #{revisionNext},
       EXECUTION_ID_ = #{executionId:VARCHAR},
       LOCK_EXP_TIME_ = #{lockExpirationTime:VARCHAR},
       LOCK_OWNER_ = #{lockOwner:VARCHAR},
       RETRIES_ = #{retries},
       EXCEPTION_STACK_ID_ = #{exceptionByteArrayId:VARCHAR},
       EXCEPTION_MSG_ = #{exceptionMessage:VARCHAR},
       FAILED_ACT_ID_ = #{failedActivityId:VARCHAR},
       DUEDATE_ = #{duedate:VARCHAR},
       SUSPENSION_STATE_ = #{suspensionState},
       PROCESS_DEF_ID_ = #{processDefinitionId:VARCHAR},
       PROCESS_DEF_KEY_ = #{processDefinitionKey:VARCHAR},
       JOB_DEF_ID_ = #{jobDefinitionId:VARCHAR},
       DEPLOYMENT_ID_ = #{deploymentId:VARCHAR},
       HANDLER_CFG_ = #{jobHandlerConfigurationRaw:VARCHAR},
       PRIORITY_ = #{priority},
       SEQUENCE_COUNTER_ = #{sequenceCounter},
       LAST_FAILURE_LOG_ID_ = #{lastFailureLogId:VARCHAR}
    </set>
    where ID_= #{id:VARCHAR}
      and REV_ = #{revision}
  </update>

    <insert id="insertEverLivingJob" parameterType="Jabe\Impl\Persistence\Entity\EverLivingJobEntity">
        insert into ${prefix}ACT_RU_JOB (
        ID_,
        TYPE_,
        LOCK_OWNER_,
        LOCK_EXP_TIME_,
        EXCLUSIVE_,
        EXECUTION_ID_,
        PROCESS_INSTANCE_ID_,
        PROCESS_DEF_ID_,
        PROCESS_DEF_KEY_,
        RETRIES_,
        EXCEPTION_STACK_ID_,
        EXCEPTION_MSG_,
        FAILED_ACT_ID_,
        DUEDATE_,
        HANDLER_TYPE_,
        HANDLER_CFG_,
        DEPLOYMENT_ID_,
        SUSPENSION_STATE_,
        JOB_DEF_ID_,
        PRIORITY_,
        SEQUENCE_COUNTER_,
        TENANT_ID_,
        CREATE_TIME_,
        REV_
        )
        values (#{id:VARCHAR},
        'ever-living',
        #{lockOwner:VARCHAR},
        #{lockExpirationTime:VARCHAR},
        #{exclusive},
        #{executionId:VARCHAR},
        #{processInstanceId:VARCHAR},
        #{processDefinitionId:VARCHAR},
        #{processDefinitionKey:VARCHAR},
        #{retries},
        #{exceptionByteArrayId:VARCHAR},
        #{exceptionMessage:VARCHAR},
        #{failedActivityId:VARCHAR},
        #{duedate:VARCHAR},
        #{jobHandlerType:VARCHAR},
        #{jobHandlerConfigurationRaw:VARCHAR},
        #{deploymentId:VARCHAR},
        #{suspensionState},
        #{jobDefinitionId:VARCHAR},
        #{priority},
        #{sequenceCounter},
        #{tenantId:VARCHAR},
        #{createTime:VARCHAR},
        1
        )
    </insert>
    <!-- MESSAGE UPDATE -->

    <update id="updateEverLivingJob" parameterType="Jabe\Impl\Persistence\Entity\EverLivingJobEntity">
        update ${prefix}ACT_RU_JOB
        <set>
            REV_ =  #{revisionNext},
            EXECUTION_ID_ = #{executionId:VARCHAR},
            LOCK_EXP_TIME_ = #{lockExpirationTime:VARCHAR},
            LOCK_OWNER_ = #{lockOwner:VARCHAR},
            RETRIES_ = #{retries},
            EXCEPTION_STACK_ID_ = #{exceptionByteArrayId:VARCHAR},
            EXCEPTION_MSG_ = #{exceptionMessage:VARCHAR},
            FAILED_ACT_ID_ = #{failedActivityId:VARCHAR},
            DUEDATE_ = #{duedate:VARCHAR},
            SUSPENSION_STATE_ = #{suspensionState},
            PROCESS_DEF_ID_ = #{processDefinitionId:VARCHAR},
            PROCESS_DEF_KEY_ = #{processDefinitionKey:VARCHAR},
            JOB_DEF_ID_ = #{jobDefinitionId:VARCHAR},
            DEPLOYMENT_ID_ = #{deploymentId:VARCHAR},
            HANDLER_CFG_ = #{jobHandlerConfigurationRaw:VARCHAR},
            PRIORITY_ = #{priority},
            SEQUENCE_COUNTER_ = #{sequenceCounter},
            LAST_FAILURE_LOG_ID_ = #{lastFailureLogId:VARCHAR}
        </set>
        where ID_= #{id:VARCHAR}
        and REV_ = #{revision}
    </update>

    <!-- ACQUIRABLE JOB UPDATE -->
    <update id="updateAcquirableJob" parameterType="Jabe\Impl\Persistence\Entity\AcquirableJobEntity">
      update ${prefix}ACT_RU_JOB
      <set>
          REV_ =  #{revisionNext},
          LOCK_EXP_TIME_ = #{lockExpirationTime:VARCHAR},
          LOCK_OWNER_ = #{lockOwner:VARCHAR},
          DUEDATE_ = #{duedate:VARCHAR},
          PROCESS_INSTANCE_ID_ = #{processInstanceId:VARCHAR},
          EXCLUSIVE_ = #{exclusive},
      </set>
      where ID_= #{id:VARCHAR}
        and REV_ = #{revision}
    </update>

</mapper>