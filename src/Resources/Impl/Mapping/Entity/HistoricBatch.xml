<?xml version="1.0" encoding="UTF-8" ?>
<!--
    Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. Camunda licenses this file to you under the Apache License,
    Version 2.0; you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Jabe\Impl\Batch\History\HistoricBatchEntity">

  <!-- INSERT -->

  <insert id="insertHistoricBatch" parameterType="Jabe\Impl\Batch\History\HistoricBatchEntity">
    insert into ${prefix}ACT_HI_BATCH
    (
      ID_,
      TYPE_,
      TOTAL_JOBS_,
      JOBS_PER_SEED_,
      INVOCATIONS_PER_JOB_,
      SEED_JOB_DEF_ID_,
      MONITOR_JOB_DEF_ID_,
      BATCH_JOB_DEF_ID_,
      TENANT_ID_,
      CREATE_USER_ID_,
      START_TIME_,
      END_TIME_,
      REMOVAL_TIME_
    )
    values
    (
      #{id:VARCHAR},
      #{type:VARCHAR},
      #{totalJobs},
      #{batchJobsPerSeed},
      #{invocationsPerBatchJob},
      #{seedJobDefinitionId:VARCHAR},
      #{monitorJobDefinitionId:VARCHAR},
      #{batchJobDefinitionId:VARCHAR},
      #{tenantId:VARCHAR},
      #{createUserId:VARCHAR},
      #{startTime:VARCHAR},
      #{endTime:VARCHAR},
      #{removalTime:VARCHAR}
    )
  </insert>

  <!-- RESULTMAP -->

  <resultMap id="historicBatchResultMap" type="Jabe\Impl\Batch\History\HistoricBatchEntity">
    <id property="id" column="ID_" dbalType="VARCHAR" />
    <result property="type" column="TYPE_" dbalType="VARCHAR" />
    <result property="totalJobs" column="TOTAL_JOBS_" dbalType="INTEGER" />
    <result property="batchJobsPerSeed" column="JOBS_PER_SEED_" dbalType="INTEGER" />
    <result property="invocationsPerBatchJob" column="INVOCATIONS_PER_JOB_" dbalType="INTEGER" />
    <result property="seedJobDefinitionId" column="SEED_JOB_DEF_ID_" dbalType="VARCHAR" />
    <result property="monitorJobDefinitionId" column="MONITOR_JOB_DEF_ID_" dbalType="VARCHAR" />
    <result property="batchJobDefinitionId" column="BATCH_JOB_DEF_ID_" dbalType="VARCHAR" />
    <result property="tenantId" column="TENANT_ID_" dbalType="VARCHAR" />
    <result property="createUserId" column="CREATE_USER_ID_" dbalType="VARCHAR" />
    <result property="startTime" column="START_TIME_" dbalType="VARCHAR" />
    <result property="endTime" column="END_TIME_" dbalType="VARCHAR" />
    <result property="removalTime" column="REMOVAL_TIME_" dbalType="VARCHAR" />
    <result property="executionStartTime" column="EXEC_START_TIME_" dbalType="VARCHAR" />
  </resultMap>

  <resultMap id="finishedReportResultMap" type="Jabe\Impl\Persistence\Entity\CleanableHistoricBatchesReportResultEntity">
    <result property="cleanableBatchesCount" column="CLEANABLE_" dbalType="BIGINT" />
    <result property="finishedBatchesCount" column="FINISHED_" dbalType="BIGINT" />
    <result property="batchType" column="TYPE_" dbalType="VARCHAR" />
    <result property="historyTimeToLive" column="HISTORY_TTL_" dbalType="BIGINT" />
  </resultMap>

  <!-- DELETE -->

  <delete id="deleteHistoricBatch" parameterType="Jabe\Impl\Batch\History\HistoricBatchEntity">
    delete from ${prefix}ACT_HI_BATCH where ID_ = #{id}
  </delete>

  <delete id="deleteHistoricBatchById" parameterType="string">
    delete from ${prefix}ACT_HI_BATCH where ID_ = #{parameter}
  </delete>

  <delete id="deleteHistoricBatchByIds" parameterType="string">
    delete
    from ${prefix}ACT_HI_BATCH
    where
      <bind name="listOfIds" value="array"/>
      <bind name="fieldName" value="'ID_'"/>
      <include refid="src/Resources/Impl/Mapping/Entity/Commons.applyInForPaginatedCollection"/>
  </delete>

  <delete id="deleteHistoricBatchesByRemovalTime"
          parameterType="Jabe\Impl\Db\ListQueryParameterObject">
    <bind name="date" value="'REMOVAL_TIME_'"/>
    <bind name="reportPeriodUnitName" value="'MINUTE'"/>
    delete ${limitBeforeWithoutOffset} from ${prefix}ACT_HI_BATCH
    where REMOVAL_TIME_ &lt;= #{parameter.removalTime}
    <include refid="andWhereMinuteInDateBetweenSql"/>
    ${limitAfterWithoutOffset}
  </delete>

  <delete id="deleteHistoricBatchesByRemovalTime_oracle"
          parameterType="Jabe\Impl\Db\ListQueryParameterObject">
    <bind name="date" value="'REMOVAL_TIME_'"/>
    <bind name="reportPeriodUnitName" value="'MINUTE'"/>
    delete ${limitBeforeWithoutOffset} from ${prefix}ACT_HI_BATCH
    where REMOVAL_TIME_ &lt;= #{parameter.removalTime}
    <include refid="andWhereMinuteInDateBetweenSql_oracle"/>
    ${limitAfterWithoutOffset}
  </delete>

  <delete id="deleteHistoricBatchesByRemovalTime_postgres_or_db2"
          parameterType="Jabe\Impl\Db\ListQueryParameterObject">
    <bind name="date" value="'REMOVAL_TIME_'"/>
    <bind name="reportPeriodUnitName" value="'MINUTE'"/>
    delete ${limitBeforeWithoutOffset} from ${prefix}ACT_HI_BATCH
    where ID_ IN
      (SELECT ID_
       FROM ${prefix}ACT_HI_BATCH
       WHERE REMOVAL_TIME_ &lt;= #{parameter.removalTime} <include refid="andWhereMinuteInDateBetweenSql"/>
       ${limitAfterWithoutOffset})
  </delete>

  <!-- UPDATE -->
  <update id="updateHistoricBatch" parameterType="Jabe\Impl\Batch\History\HistoricBatchEntity">
    update ${prefix}ACT_HI_BATCH
    <set>
      <if test="endTime != null">
        END_TIME_ = #{endTime:VARCHAR},
      </if>
      <if test="removalTime != null">
        REMOVAL_TIME_ = #{removalTime:VARCHAR},
      </if>
      <if test="executionStartTime != null">
        EXEC_START_TIME_ = #{executionStartTime:VARCHAR}
      </if>
    </set>
    where ID_= #{id:VARCHAR}
  </update>

  <update id="updateHistoricBatch_mssql" parameterType="Jabe\Impl\Batch\History\HistoricBatchEntity">
    update RES
    <set>
      <if test="endTime != null">
        RES.END_TIME_ = #{endTime:VARCHAR},
      </if>
      <if test="removalTime != null">
        RES.REMOVAL_TIME_ = #{removalTime:VARCHAR},
      </if>
      <if test="executionStartTime != null">
        EXEC_START_TIME_ = #{executionStartTime:VARCHAR}
      </if>
    </set>
    FROM ${prefix}ACT_HI_BATCH RES WITH (FORCESEEK)
    where RES.ID_= #{id:VARCHAR}
  </update>

  <update id="updateHistoricBatchRemovalTimeById" parameterType="Jabe\Impl\Batch\History\HistoricBatchEntity">
    update ${prefix}ACT_HI_BATCH
    <set>
        REMOVAL_TIME_ = #{removalTime:VARCHAR}
    </set>
    where ID_ = #{id:VARCHAR}
  </update>

  <update id="updateHistoricBatchRemovalTimeById_mssql" parameterType="Jabe\Impl\Batch\History\HistoricBatchEntity">
    update RES
    <set>
      RES.REMOVAL_TIME_ = #{removalTime:VARCHAR}
    </set>
    FROM ${prefix}ACT_HI_BATCH RES WITH (FORCESEEK)
    where RES.ID_ = #{id:VARCHAR}
  </update>

  <!-- SELECT -->
  <select id="selectHistoricBatch" parameterType="string" resultMap="historicBatchResultMap">
    select * from ${prefix}ACT_HI_BATCH where ID_ = #{id}
  </select>

  <select id="selectHistoricBatchesByQueryCriteria" parameterType="Jabe\Impl\Batch\History\HistoricBatchQueryImpl" resultMap="historicBatchResultMap">
    <include refid="src/Resources/Impl/Mapping/Entity/Commons.bindOrderBy"/>
    ${limitBefore}
    select ${distinct} RES.*
    ${limitBetween}
    <include refid="selectHistoricBatchesByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </select>

  <select id="selectHistoricBatchCountByQueryCriteria" parameterType="Jabe\Impl\Batch\History\HistoricBatchQueryImpl" resultType="integer">
    ${countDistinctBeforeStart} RES.ID_ ${countDistinctBeforeEnd}
    <include refid="selectHistoricBatchesByQueryCriteriaSql"/>
    ${countDistinctAfterEnd}
  </select>

  <sql id="selectHistoricBatchesByQueryCriteriaSql">
    from ${prefix}ACT_HI_BATCH RES

    <include refid="Jabe\Impl\Persistence\Entity\AuthorizationEntity.authCheckJoin" />

    <where>
      <if test="batchId != null">
        RES.ID_ = #{batchId}
      </if>
      <if test="type != null">
        and RES.TYPE_ = #{type}
      </if>
      <if test="completed != null and completed">
        and RES.END_TIME_ is not null
      </if>
      <if test="completed != null and !completed">
        and RES.END_TIME_ is null
      </if>
      <if test="isTenantIdSet">
        <if test="!empty(tenantIds)">
          and RES.TENANT_ID_ in
          <foreach item="tenantId" index="index" collection="tenantIds"
                   open="(" separator="," close=")">
            #{tenantId}
          </foreach>
        </if>
        <if test="empty(tenantIds)">
          and RES.TENANT_ID_ is null
        </if>
      </if>

      <include refid="Jabe\Impl\Persistence\Entity\AuthorizationEntity.queryAuthorizationCheck" />
      <include refid="Jabe\Impl\Persistence\Entity\TenantEntity.queryTenantCheck" />
    </where>
  </sql>

  <select id="selectHistoricBatchByJobId" parameterType="string" resultMap="historicBatchResultMap">
    select ID_, REMOVAL_TIME_ from ${prefix}ACT_HI_BATCH
      where ID_ in (SELECT HB.ID_ from ${prefix}ACT_RU_JOB J
        inner join ${prefix}ACT_HI_BATCH HB
        on J.JOB_DEF_ID_ in
          (HB.SEED_JOB_DEF_ID_,
           HB.MONITOR_JOB_DEF_ID_,
           HB.BATCH_JOB_DEF_ID_)
        where J.ID_ = #{jobId})
  </select>

  <!-- Select ids for async history cleanup -->

  <select id="selectHistoricBatchIdsForCleanup" parameterType="Jabe\Impl\Db\ListQueryParameterObject" resultType="string">
    <include refid="selectHistoricBatchIdsForCleanupSql"/>
    <include refid="andWhereMinuteInDateBetweenSql"/>
    ${orderBy}
    ${limitAfter}
  </select>

  <select id="selectHistoricBatchIdsForCleanup_oracle" parameterType="Jabe\Impl\Db\ListQueryParameterObject" resultType="string">
    <include refid="selectHistoricBatchIdsForCleanupSql"/>
    <include refid="andWhereMinuteInDateBetweenSql_oracle"/>
    ${orderBy}
    ${limitAfter}
  </select>

  <sql id="selectHistoricBatchIdsForCleanupSql">
    <include refid="src/Resources/Impl/Mapping/Entity/Commons.bindOrderBy"/>
    <bind name="date" value="'RES.END_TIME_'"/>
    <bind name="currentTimestamp" value="parameter.currentTimestamp"/>
    <bind name="reportPeriodUnitName" value="'MINUTE'"/>
    ${limitBefore}
    SELECT RES.ID_, RES.END_TIME_
    ${limitBetween}
    FROM ${prefix}ACT_HI_BATCH RES
    WHERE
    <foreach index="key" item="value" collection="parameter.map" open="(" separator="OR" close=")">
      <bind name="days" value="'#{value}'"/>
      RES.TYPE_ = #{key} and ${dayComparator}
    </foreach>
    AND RES.END_TIME_ is not null
  </sql>

  <sql id="andWhereMinuteInDateBetweenSql">
    <if test="parameter.minuteFrom != null and parameter.minuteTo != null">
      AND ${datepart1}<include refid="src/Resources/Impl/Mapping/Entity/Commons.periodUnitFunction"/>${datepart2}${date}${datepart3}
      between #{parameter.minuteFrom} and #{parameter.minuteTo}
    </if>
  </sql>

  <sql id="andWhereMinuteInDateBetweenSql_oracle">
    <if test="parameter.minuteFrom != null and parameter.minuteTo != null">
      AND ${datepart1}${date}${datepart2}<include refid="src/Resources/Impl/Mapping/Entity/Commons.periodUnitFunction"/>${datepart3}
      between #{parameter.minuteFrom} and #{parameter.minuteTo}
    </if>
  </sql>

  <!-- Select History Cleanup Report Entities -->
  <select id="selectFinishedBatchesReportEntitiesCount" parameterType="Jabe\Impl\CleanableHistoricBatchReportImpl" resultType="integer">
    ${countDistinctBeforeStart} RES.TYPE_ ${countDistinctBeforeEnd}
    <include refid="selectFinishedBatchesReportEntitiesSql" />
    ${countDistinctAfterEnd}
  </select>

  <select id="selectFinishedBatchesReportEntities" parameterType="Jabe\Impl\CleanableHistoricBatchReportImpl" resultMap="finishedReportResultMap">
    <include refid="src/Resources/Impl/Mapping/Entity/Commons.bindOrderBy"/>
    ${limitBefore}
    SELECT ${distinct} RES.*
    ${limitBetween}
    <include refid="selectFinishedBatchesReportEntitiesSql"/>
    ${orderBy}
    ${limitAfter}
  </select>

  <sql id="selectFinishedBatchesReportEntitiesSql">
    <bind name="date" value="'RES.END_TIME_'" />
    <bind name="days" value="'HISTORY_TTL_'"/>
    FROM (
      SELECT RES.TYPE_,
             C.HISTORY_TTL_,
             <choose>
               <when test="isHistoryCleanupStrategyRemovalTimeBased">
                 SUM(CASE WHEN REMOVAL_TIME_ is not null and REMOVAL_TIME_ &lt;= #{currentTimestamp} THEN 1 ELSE 0 END) AS CLEANABLE_,
               </when>
               <otherwise>
                 SUM(CASE WHEN HISTORY_TTL_ is not null and (HISTORY_TTL_ = 0 OR ${dayComparator}) and END_TIME_ is not null THEN 1 ELSE 0 END) AS CLEANABLE_,
               </otherwise>
             </choose>
             F.FINISHED_
        FROM ${prefix}ACT_HI_BATCH RES
        LEFT JOIN (
          <foreach index="key" item="value" collection="parameter" separator="UNION">
            select ${constant.varchar.cast} as TYPE_,
            <choose>
              <when test="value == null">${constant.integer.cast}</when>
              <otherwise>${value}</otherwise>
            </choose>
            as HISTORY_TTL_
            ${dbSpecificDummyTable}
          </foreach>
        ) C ON C.TYPE_ = RES.TYPE_
      LEFT JOIN (
        SELECT COUNT(TYPE_) AS FINISHED_, TYPE_
        FROM ${prefix}ACT_HI_BATCH RES
        WHERE END_TIME_ is not null
        GROUP BY TYPE_
      ) F ON F.TYPE_ = RES.TYPE_
      GROUP BY RES.TYPE_,
      HISTORY_TTL_,
      F.FINISHED_
    ) RES
  </sql>

  <select id="selectOnlyFinishedBatchesReportEntities" resultMap="finishedReportResultMap">
    <include refid="src/Resources/Impl/Mapping/Entity/Commons.bindOrderBy" />
    ${limitBefore}
    SELECT FINISHED_, TYPE_
    ${limitBetween}
    <include refid="selectOnlyFinishedBatchesReportEntitiesSql" />
    ${orderBy}
    ${limitAfter}
  </select>

  <select id="selectOnlyFinishedBatchesReportEntitiesCount" resultType="integer">
    ${countDistinctBeforeStart} RES.TYPE_ ${countDistinctBeforeEnd}
    <include refid="selectOnlyFinishedBatchesReportEntitiesSql" />
    ${countDistinctAfterEnd}
  </select>

  <sql id="selectOnlyFinishedBatchesReportEntitiesSql">
    FROM (
      SELECT COUNT(*) AS FINISHED_, TYPE_
      FROM ${prefix}ACT_HI_BATCH RES
      WHERE END_TIME_ is not null
      GROUP BY TYPE_
    ) RES
  </sql>

</mapper>