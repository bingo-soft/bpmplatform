<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Jabe\Impl\History\Event\HistoricExternalTaskLogEntity">

  <!-- INSERT -->

  <insert id="insertHistoricExternalTaskLog" parameterType="Jabe\Impl\History\Event\HistoricExternalTaskLogEntity">
    insert into ${prefix}ACT_HI_EXT_TASK_LOG (
      ID_,
      TIMESTAMP_,
      EXT_TASK_ID_,
      RETRIES_,
      TOPIC_NAME_,
      WORKER_ID_,
      PRIORITY_,
      ERROR_MSG_,
      ERROR_DETAILS_ID_,
      ACT_ID_,
      ACT_INST_ID_,
      EXECUTION_ID_,
      ROOT_PROC_INST_ID_,
      PROC_INST_ID_,
      PROC_DEF_ID_,
      PROC_DEF_KEY_,
      TENANT_ID_,
      STATE_,
      REMOVAL_TIME_
    )
    values (#{id:VARCHAR},
      #{timestamp:VARCHAR},
      #{externalTaskId:VARCHAR},
      #{retries},
      #{topicName:VARCHAR},
      #{workerId:VARCHAR},
      #{priority},
      #{errorMessage:VARCHAR},
      #{errorDetailsByteArrayId:VARCHAR},
      #{activityId:VARCHAR},
      #{activityInstanceId:VARCHAR},
      #{executionId:VARCHAR},
      #{rootProcessInstanceId:VARCHAR},
      #{processInstanceId:VARCHAR},
      #{processDefinitionId:VARCHAR},
      #{processDefinitionKey:VARCHAR},
      #{tenantId:VARCHAR},
      #{state},
      #{removalTime:VARCHAR}
    )
  </insert>

  <!-- UPDATE -->

  <update id="updateExternalTaskLogByRootProcessInstanceId"
          parameterType="array">
      update ${prefix}ACT_HI_EXT_TASK_LOG set
      REMOVAL_TIME_ = #{removalTime:VARCHAR}

      where ROOT_PROC_INST_ID_ = #{rootProcessInstanceId:VARCHAR}
  </update>

  <update id="updateExternalTaskLogByRootProcessInstanceId_mssql"
          parameterType="array">
      update RES set
      RES.REMOVAL_TIME_ = #{removalTime:VARCHAR}
      FROM ${prefix}ACT_HI_EXT_TASK_LOG RES WITH (FORCESEEK)
      where RES.ROOT_PROC_INST_ID_ = #{rootProcessInstanceId:VARCHAR}
  </update>

  <update id="updateExternalTaskLogByRootProcessInstanceId_mysql"
          parameterType="array">
      update ${prefix}ACT_HI_EXT_TASK_LOG set
      REMOVAL_TIME_ = #{removalTime:VARCHAR},
      TIMESTAMP_ = TIMESTAMP_

      where ROOT_PROC_INST_ID_ = #{rootProcessInstanceId:VARCHAR}
  </update>

  <update id="updateExternalTaskLogByProcessInstanceId"
          parameterType="array">
    update ${prefix}ACT_HI_EXT_TASK_LOG
      set REMOVAL_TIME_ = #{removalTime:VARCHAR}
      where PROC_INST_ID_ = #{processInstanceId:VARCHAR}
  </update>

  <update id="updateExternalTaskLogByProcessInstanceId_mssql"
          parameterType="array">
    update RES set
      RES.REMOVAL_TIME_ = #{removalTime:VARCHAR}
      FROM ${prefix}ACT_HI_EXT_TASK_LOG RES WITH (FORCESEEK)
      where RES.PROC_INST_ID_ = #{processInstanceId:VARCHAR}
  </update>

  <update id="updateExternalTaskLogByProcessInstanceId_mysql"
          parameterType="array">
    update ${prefix}ACT_HI_EXT_TASK_LOG
      set REMOVAL_TIME_ = #{removalTime:VARCHAR},
          TIMESTAMP_ = TIMESTAMP_
      where PROC_INST_ID_ = #{processInstanceId:VARCHAR}
  </update>

  <!-- DELETE -->

  <delete id="deleteHistoricExternalTaskLogByProcessInstanceIds">
    delete
    from ${prefix}ACT_HI_EXT_TASK_LOG
    where
      <bind name="listOfIds" value="array"/>
      <bind name="fieldName" value="'PROC_INST_ID_'"/>
      <include refid="src/Resources/Impl/Mapping/Entity/Commons.applyInForPaginatedCollection"/>
  </delete>

  <sql id="andWhereMinuteInDateBetweenSql">
    <if test="parameter.minuteFrom != null and parameter.minuteTo != null">
      AND ${datepart1}<include refid="src/Resources/Impl/Mapping/Entity/Commons.periodUnitFunction"/>${datepart2}${date}${datepart3}
      between #{parameter.minuteFrom} and #{parameter.minuteTo}
    </if>
  </sql>

  <sql id="andWhereMinuteInDateBetweenSql_oracle">
    <if test="parameter.minuteFrom != null and parameter.minuteTo != null">
      AND ${datepart1}${date}${datepart2}<include refid="src/Resources/Impl/Mapping/Entity/Commons.periodUnitFunction"/>${datepart3}
      between #{parameter.minuteFrom} and #{parameter.minuteTo}
    </if>
  </sql>

  <delete id="deleteExternalTaskLogByRemovalTime"
          parameterType="Jabe\Impl\Db\ListQueryParameterObject">
    <bind name="date" value="'REMOVAL_TIME_'"/>
    <bind name="reportPeriodUnitName" value="'MINUTE'"/>
    delete ${limitBeforeWithoutOffset} from ${prefix}ACT_HI_EXT_TASK_LOG
    where REMOVAL_TIME_ &lt;= #{parameter.removalTime}
    <include refid="andWhereMinuteInDateBetweenSql"/>
    ${limitAfterWithoutOffset}
  </delete>

  <delete id="deleteExternalTaskLogByRemovalTime_oracle"
          parameterType="Jabe\Impl\Db\ListQueryParameterObject">
    <bind name="date" value="'REMOVAL_TIME_'"/>
    <bind name="reportPeriodUnitName" value="'MINUTE'"/>
    delete ${limitBeforeWithoutOffset} from ${prefix}ACT_HI_EXT_TASK_LOG
    where REMOVAL_TIME_ &lt;= #{parameter.removalTime}
    <include refid="andWhereMinuteInDateBetweenSql_oracle"/>
    ${limitAfterWithoutOffset}
  </delete>

  <delete id="deleteExternalTaskLogByRemovalTime_postgres_or_db2"
          parameterType="Jabe\Impl\Db\ListQueryParameterObject">
    <bind name="date" value="'REMOVAL_TIME_'"/>
    <bind name="reportPeriodUnitName" value="'MINUTE'"/>
    delete ${limitBeforeWithoutOffset} from ${prefix}ACT_HI_EXT_TASK_LOG
    where ID_ IN
      (SELECT ID_
       FROM ${prefix}ACT_HI_EXT_TASK_LOG
       WHERE REMOVAL_TIME_ &lt;= #{parameter.removalTime} <include refid="andWhereMinuteInDateBetweenSql"/>
       ${limitAfterWithoutOffset})
  </delete>

  <!-- BYTE ARRAY DELETE -->

  <delete id="deleteErrorDetailsByteArraysByIds">
    delete
    from
      ${prefix}ACT_GE_BYTEARRAY
    <where>
      ID_ in (
        select E.ERROR_DETAILS_ID_
        from ${prefix}ACT_HI_EXT_TASK_LOG E
        <where>
          <include refid="selectErrorDetailsByteArrayIds"/>
        </where>
      )
    </where>
  </delete>

  <delete id="deleteErrorDetailsByteArraysByIds_mysql">
    delete B
    from
      ${prefix}ACT_GE_BYTEARRAY B
    inner join ${prefix}ACT_HI_EXT_TASK_LOG E
      on B.ID_ = E.ERROR_DETAILS_ID_
    <include refid="selectErrorDetailsByteArrayIds"/>
  </delete>

  <!-- RESULT MAP -->

  <resultMap id="historicExternalTaskLogMap" type="Jabe\Impl\History\Event\HistoricExternalTaskLogEntity">
    <id property="id" column="ID_" dbalType="VARCHAR" />
    <result property="timestamp" column="TIMESTAMP_" dbalType="VARCHAR" />
    <result property="externalTaskId" column="EXT_TASK_ID_" dbalType="VARCHAR" />
    <result property="retries" column="RETRIES_" dbalType="INTEGER" />
    <result property="topicName" column="TOPIC_NAME_" dbalType="VARCHAR" />
    <result property="workerId" column="WORKER_ID_" dbalType="VARCHAR" />
    <result property="priority" column="PRIORITY_" dbalType="BIGINT" />
    <result property="errorMessage" column="ERROR_MSG_" dbalType="VARCHAR" />
    <result property="errorDetailsByteArrayId" column="ERROR_DETAILS_ID_" dbalType="VARCHAR" />
    <result property="activityId" column="ACT_ID_" dbalType="VARCHAR" />
    <result property="activityInstanceId" column="ACT_INST_ID_" dbalType="VARCHAR" />
    <result property="executionId" column="EXECUTION_ID_" dbalType="VARCHAR" />
    <result property="rootProcessInstanceId" column="ROOT_PROC_INST_ID_" dbalType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" dbalType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" dbalType="VARCHAR" />
    <result property="processDefinitionKey" column="PROC_DEF_KEY_" dbalType="VARCHAR" />
    <result property="tenantId" column="TENANT_ID_" dbalType="VARCHAR" />
    <result property="state" column="STATE_" dbalType="VARCHAR" />
    <result property="removalTime" column="REMOVAL_TIME_" dbalType="VARCHAR"/>
  </resultMap>

  <sql id="selectErrorDetailsByteArrayIds">
    and E.ERROR_DETAILS_ID_ is not null
    <if test="id != null">
      and E.ID_ = #{id:VARCHAR}
    </if>
    <if test="externalTaskId != null">
      and E.RES.EXT_TASK_ID_ = #{externalTaskId:VARCHAR}
    </if>
    <if test="topicName != null">
      and E.RES.TOPIC_NAME_ = #{topicName:VARCHAR}
    </if>
    <if test="workerId != null">
      and E.RES.WORKER_ID_ = #{workerId:VARCHAR}
    </if>
    <if test="executionId != null">
      and E.EXECUTION_ID_ = #{executionId:VARCHAR}
    </if>
    <if test="processInstanceId != null">
      and E.PROC_INST_ID_ = #{processInstanceId:VARCHAR}
    </if>
    <if test="!empty(processInstanceIdIn)">
      and
        <bind name="listOfIds" value="processInstanceIdIn"/>
        <bind name="fieldName" value="'E.PROC_INST_ID_'"/>
        <include refid="src/Resources/Impl/Mapping/Entity/Commons.applyInForPaginatedArray"/>
    </if>
    <if test="processDefinitionId != null">
      and E.PROC_DEF_ID_ = #{processDefinitionId:VARCHAR}
    </if>
    <if test="processDefinitionKey != null">
      and E.PROC_DEF_KEY_ = #{processDefinitionKey:VARCHAR}
    </if>
  </sql>

  <!-- SELECT -->

  <select id="selectHistoricExternalTaskLog" resultMap="historicExternalTaskLogMap">
    select * from ${prefix}ACT_HI_EXT_TASK_LOG where ID_ = #{id}
  </select>

  <select id="selectHistoricExternalTaskLogByQueryCriteria" parameterType="Jabe\Impl\HistoricExternalTaskLogQueryImpl" resultMap="historicExternalTaskLogMap">
    <include refid="src/Resources/Impl/Mapping/Entity/Commons.bindOrderBy"/>
    ${limitBefore}
    select ${distinct} RES.*
    ${limitBetween}
    <include refid="selectHistoricExternalTaskLogByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </select>

  <select id="selectHistoricExternalTaskLogCountByQueryCriteria" parameterType="Jabe\Impl\HistoricExternalTaskLogQueryImpl" resultType="integer">
    ${countDistinctBeforeStart} RES.ID_ ${countDistinctBeforeEnd}
    <include refid="selectHistoricExternalTaskLogByQueryCriteriaSql"/>
    ${countDistinctAfterEnd}
  </select>

  <sql id="selectHistoricExternalTaskLogByQueryCriteriaSql">
    FROM ${prefix}ACT_HI_EXT_TASK_LOG RES

    <if test="authCheck.shouldPerformAuthorizatioCheck and !authCheck.revokeAuthorizationCheckEnabled and authCheck.authUserId != null">
      <include refid="Jabe\Impl\Persistence\Entity\AuthorizationEntity.authCheckJoinWithoutOnClause"/>
      AUTH ON (AUTH.RESOURCE_ID_ ${authJoinStart}
        RES.PROC_DEF_KEY_ ${authJoinSeparator} '*'
        <if test="authCheck.isHistoricInstancePermissionsEnabled">
          ${authJoinSeparator} RES.PROC_INST_ID_
        </if>
        ${authJoinEnd}
      )
    </if>

    <where>
      <if test="id != null">
        RES.ID_ = #{id}
      </if>
      <if test="externalTaskId != null">
        and RES.EXT_TASK_ID_ = #{externalTaskId}
      </if>
      <if test="errorMessage != null">
        and RES.ERROR_MSG_ = #{errorMessage}
      </if>
      <if test="topicName != null">
        and RES.TOPIC_NAME_ = #{topicName}
      </if>
      <if test="workerId != null">
        and RES.WORKER_ID_ = #{workerId}
      </if>
      <if test="!empty(activityIds)">
        and RES.ACT_ID_ in
        <foreach item="item" index="index" collection="activityIds"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="!empty(activityInstanceIds)">
        and RES.ACT_INST_ID_ in
        <foreach item="item" index="index" collection="activityInstanceIds"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="!empty(executionIds)">
        and RES.EXECUTION_ID_ in
        <foreach item="item" index="index" collection="executionIds"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="processInstanceId != null">
        and RES.PROC_INST_ID_ = #{processInstanceId}
      </if>
      <if test="processDefinitionId != null">
        and RES.PROC_DEF_ID_ = #{processDefinitionId}
      </if>
      <if test="processDefinitionKey != null">
        and RES.PROC_DEF_KEY_ = #{processDefinitionKey}
      </if>
      <if test="priorityHigherThanOrEqual != null">
        and RES.PRIORITY_ &gt;= #{priorityHigherThanOrEqual}
      </if>
      <if test="priorityLowerThanOrEqual != null">
        and RES.PRIORITY_ &lt;= #{priorityLowerThanOrEqual}
      </if>
      <if test="isTenantIdSet">
        <if test="!empty(tenantIds)">
          and RES.TENANT_ID_ in
          <foreach item="tenantId" index="index" collection="tenantIds"
                   open="(" separator="," close=")">
            #{tenantId}
          </foreach>
        </if>
        <if test="empty(tenantIds)">
          and RES.TENANT_ID_ is null
        </if>
      </if>
      <if test="state != null">
        and RES.STATE_ = #{state.stateCode}
      </if>

      <if test="authCheck.shouldPerformAuthorizatioCheck and authCheck.authUserId != null">
        <include refid="Jabe\Impl\Persistence\Entity\AuthorizationEntity.queryAuthorizationCheck"/>
      </if>
      <include refid="Jabe\Impl\Persistence\Entity\TenantEntity.queryTenantCheck"/>

    </where>
  </sql>



</mapper>