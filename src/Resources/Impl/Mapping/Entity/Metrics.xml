<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Jabe\Impl\Persistence\Entity\MeterLogEntity">

  <!-- METER INSERT -->

  <insert id="insertMeterLog" parameterType="Jabe\Impl\Persistence\Entity\MeterLogEntity">
    insert into ${prefix}ACT_RU_METER_LOG (ID_, NAME_, REPORTER_, VALUE_, TIMESTAMP_, MILLISECONDS_)
    values (
    #{id:VARCHAR},
    #{name:VARCHAR},
    #{reporter:VARCHAR},
    #{value },
    #{timestamp:VARCHAR},
    #{milliseconds }
    )
  </insert>

  <!-- METER BULK DELTE -->

  <delete id="deleteAllMeterLogEntries">
    delete from ${prefix}ACT_RU_METER_LOG
  </delete>

  <delete id="deleteMeterLogEntriesByTimestampAndReporter" parameterType="array">
    delete from ${prefix}ACT_RU_METER_LOG
    <where>
      <if test="reporter != null">
        and REPORTER_ = #{reporter:VARCHAR}
      </if>
      <if test="milliseconds != null">
        and MILLISECONDS_ &lt;= #{milliseconds}
      </if>

    </where>
  </delete>


  <!-- Meter RESULTMAP -->

  <resultMap id="meterResultMap" type="Jabe\Impl\Persistence\Entity\MeterLogEntity">
    <id property="id" column="ID_" dbalType="VARCHAR" />
    <result property="name" column="NAME_" dbalType="VARCHAR" />
    <result property="reporter" column="REPORTER_" dbalType="VARCHAR" />
    <result property="value" column="VALUE_" dbalType="BIGINT" />
    <result property="milliseconds" column="MILLISECONDS_" dbalType="BIGINT" />
  </resultMap>



  <!-- SELECT -->

  <select id="selectMeterLogSum" parameterType="Jabe\Impl\Metrics\MetricsQueryImpl" resultType="integer">
    select SUM(RES.VALUE_)
    <include refid="selectMeterLogsByQueryCriteriaSqlOldTimestampColumn"/>
  </select>

  <sql id="selectMeterLogsByQueryCriteriaSqlOldTimestampColumn">
    from ${prefix}ACT_RU_METER_LOG RES
    <where>
      <if test="name != null">
        and RES.NAME_ = #{name}
      </if>
      <if test="reporter != null">
        and RES.REPORTER_ = #{reporter}
      </if>
      <if test="startDate != null">
        and RES.TIMESTAMP_ &gt;= #{startDate}
      </if>
      <if test="endDate != null">
        and RES.TIMESTAMP_ &lt; #{endDate}
      </if>
    </where>
  </sql>

  <sql id="selectMeterLogsByQueryCriteriaSql">
    from ${prefix}ACT_RU_METER_LOG RES
    <where>
      <if test="name != null">
        and RES.NAME_ = #{name}
      </if>
      <if test="reporter != null">
        and RES.REPORTER_ = #{reporter}
      </if>
      <if test="startDate != null">
        and RES.MILLISECONDS_ &gt;= #{startDateMilliseconds}
      </if>
      <if test="endDate != null">
        and RES.MILLISECONDS_ &lt; #{endDateMilliseconds}
      </if>
    </where>
  </sql>


  <resultMap id="meterResultIntervallMap" type="Jabe\Impl\Persistence\Entity\MetricIntervalEntity">
    <constructor>
      <idArg column="INTERVAL_" dbalType="BIGINT" phpType="int"/>
      <idArg column="NAME_" phpType="string" dbalType="VARCHAR" />
      <idArg column="REPORTER_" phpType="string" dbalType="VARCHAR"/>
    </constructor>
    <result property="value" column="VALUE_" dbalType="BIGINT" />
  </resultMap>

  <select id="selectMeterLogAggregatedByTimeInterval_db2_or_mssql"  parameterType="Jabe\Impl\Metrics\MetricsQueryImpl" resultMap="meterResultIntervallMap">
    SELECT NAME_, REPORTER_, VALUE_, INTERVAL_
    FROM (
    SELECT row_number() OVER ( ORDER BY INTERVAL_ DESC, NAME_ DESC, REPORTER_ DESC) AS rid, RES.*
    FROM (
    <include refid="selectMeterLogAggregatedByTimeIntervalQuery"/>
    ) RES
    ) RES
    WHERE RES.rid BETWEEN #{firstRow} AND #{lastRow}-1
    ORDER BY INTERVAL_ DESC
  </select>

  <sql id="selectMeterLogAggregatedByTimeIntervalQuery" >
    SELECT NAME_, REPORTER_, SUM(VALUE_) as VALUE_, INTERVAL_
    FROM
    (
    SELECT
    NAME_,
    <if test="aggregateByReporter">
      ${constant.null.reporter},
    </if>
    <if test="!aggregateByReporter">
      REPORTER_,
    </if>
    VALUE_,
    FLOOR( (MILLISECONDS_ / 1000) / #{interval}) * #{interval} * 1000 as INTERVAL_
    <include refid="selectMeterLogsByQueryCriteriaSql"/>
    ) RES
    GROUP BY
    NAME_,
    REPORTER_,
    INTERVAL_
  </sql>

  <select id="selectMeterLogAggregatedByTimeInterval"  parameterType="Jabe\Impl\Metrics\MetricsQueryImpl" resultMap="meterResultIntervallMap">
    ${limitBefore}
    <include refid="selectMeterLogAggregatedByTimeIntervalQuery"/>
    ORDER BY INTERVAL_ DESC
    ${limitAfter}
  </select>

</mapper>