<?xml version="1.0" encoding="UTF-8" ?>
<!--
    Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH
    under one or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information regarding copyright
    ownership. Camunda licenses this file to you under the Apache License,
    Version 2.0; you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
  
<mapper namespace="Jabe\Impl\Persistence\Entity\IncidentEntity">

  <!-- INCIDENT DELETE -->

  <delete id="deleteIncident" parameterType="Jabe\Impl\Persistence\Entity\IncidentEntity">
    delete from ${prefix}ACT_RU_INCIDENT where ID_ = #{id} and REV_ = #{revision}
  </delete>

  <!-- INCIDENT INSERT -->

  <insert id="insertIncident" parameterType="Jabe\Impl\Persistence\Entity\IncidentEntity">
    insert into ${prefix}ACT_RU_INCIDENT (
      ID_, 
      INCIDENT_TIMESTAMP_, 
      INCIDENT_MSG_, 
      INCIDENT_TYPE_, 
      EXECUTION_ID_, 
      ACTIVITY_ID_, 
      FAILED_ACTIVITY_ID_, 
      PROC_INST_ID_, 
      PROC_DEF_ID_, 
      CAUSE_INCIDENT_ID_, 
      ROOT_CAUSE_INCIDENT_ID_, 
      CONFIGURATION_, 
      TENANT_ID_,
      JOB_DEF_ID_,
      ANNOTATION_,
      REV_)
    values (
      #{id:VARCHAR},
      #{incidentTimestamp:VARCHAR},
      #{incidentMessage:VARCHAR},
      #{incidentType:VARCHAR},
      #{executionId:VARCHAR},
      #{activityId:VARCHAR},
      #{failedActivityId:VARCHAR},
      #{processInstanceId:VARCHAR},
      #{processDefinitionId:VARCHAR},
      #{causeIncidentId:VARCHAR},
      #{rootCauseIncidentId:VARCHAR},
      #{configuration:VARCHAR},
      #{tenantId:VARCHAR},
      #{jobDefinitionId:VARCHAR},
      #{annotation:VARCHAR},
      1
    )
  </insert>

  <!-- INCIDENT RESULTMAP -->

  <resultMap id="incidentResultMap" type="Jabe\Impl\Persistence\Entity\IncidentEntity">
    <id property="id" column="ID_" dbalType="VARCHAR" />
    <result property="incidentTimestamp" column="INCIDENT_TIMESTAMP_" dbalType="VARCHAR" />
    <result property="incidentType" column="INCIDENT_TYPE_" dbalType="VARCHAR" />
    <result property="incidentMessage" column="INCIDENT_MSG_" dbalType="VARCHAR" />
    <result property="executionId" column="EXECUTION_ID_" dbalType="VARCHAR" />
    <result property="activityId" column="ACTIVITY_ID_" dbalType="VARCHAR" />
    <result property="failedActivityId" column="FAILED_ACTIVITY_ID_" dbalType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" dbalType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" dbalType="VARCHAR" />
    <result property="causeIncidentId" column="CAUSE_INCIDENT_ID_" dbalType="VARCHAR" />
    <result property="rootCauseIncidentId" column="ROOT_CAUSE_INCIDENT_ID_" dbalType="VARCHAR" />
    <result property="configuration" column="CONFIGURATION_" dbalType="VARCHAR" />
    <result property="tenantId" column="TENANT_ID_" dbalType="VARCHAR" />
    <result property="jobDefinitionId" column="JOB_DEF_ID_" dbalType="VARCHAR" />
    <result property="annotation" column="ANNOTATION_" dbalType="VARCHAR" />
    <result property="revision" column="REV_" dbalType="INTEGER" />
  </resultMap>
  
  <!-- INCIDENT SELECT -->

  <select id="selectIncident" parameterType="string" resultMap="incidentResultMap">
    select * from ${prefix}ACT_RU_INCIDENT where ID_ = #{id}
  </select>
  <select id="selectIncidentsByExecutionId" parameterType="string" resultMap="incidentResultMap">
    select *
    from ${prefix}ACT_RU_INCIDENT I
    where I.EXECUTION_ID_ = #{parameter}
  </select>
  
  <select id="selectIncidentsByProcessInstanceId" parameterType="string" resultMap="incidentResultMap">
    select *
    from ${prefix}ACT_RU_INCIDENT I
    where I.PROC_INST_ID_ = #{parameter}
  </select>

  <select id="selectIncidentsByConfiguration" resultMap="incidentResultMap">
    select *
    from ${prefix}ACT_RU_INCIDENT I
    where I.CONFIGURATION_ = #{parameter.configuration:VARCHAR}
    <if test="parameter.incidentType != null">
      and INCIDENT_TYPE_ = #{parameter.incidentType:VARCHAR}
    </if>
  </select>

  <select id="selectIncidentByQueryCriteria" parameterType="Jabe\Impl\IncidentQueryImpl" resultMap="incidentResultMap">
    <include refid="src/Resources/Impl/Mapping/Entity/Commons.bindOrderBy"/>
    ${limitBefore}
    select ${distinct} RES.*
    ${limitBetween}
    <include refid="selectIncidentByQueryCriteriaSql"/>
    ${orderBy}
    ${limitAfter}
  </select>

  <select id="selectIncidentCountByQueryCriteria" parameterType="Jabe\Impl\IncidentQueryImpl" resultType="integer">
    ${countDistinctBeforeStart} RES.ID_ ${countDistinctBeforeEnd}
    <include refid="selectIncidentByQueryCriteriaSql"/>
    ${countDistinctAfterEnd}
  </select>

  <sql id="selectIncidentByQueryCriteriaSql">
    from ${prefix}ACT_RU_INCIDENT RES

    <if test="!empty(processDefinitionKeys)
        || (authCheck.shouldPerformAuthorizatioCheck and authCheck.authUserId != null)">
      left join ${prefix}ACT_RE_PROCDEF PROCDEF
      on RES.PROC_DEF_ID_ = PROCDEF.ID_
    </if>

    <where>
      <if test="id != null">
        RES.ID_ = #{id}
      </if>
      <if test="incidentType != null">
        and RES.INCIDENT_TYPE_ = #{incidentType}
      </if>
      <if test="incidentMessage != null">
        and RES.INCIDENT_MSG_ = #{incidentMessage}
      </if>
      <if test="incidentMessageLike != null">
        and RES.INCIDENT_MSG_ like #{incidentMessageLike} ESCAPE ${escapeChar}
      </if>
      <if test="executionId != null">
        and RES.EXECUTION_ID_ = #{executionId}
      </if>
      <if test="incidentTimestampBefore != null">
        and RES.INCIDENT_TIMESTAMP_ &lt; #{incidentTimestampBefore}
      </if>
      <if test="incidentTimestampAfter != null">
        and RES.INCIDENT_TIMESTAMP_ &gt; #{incidentTimestampAfter}
      </if>
      <if test="activityId != null">
        and RES.ACTIVITY_ID_ = #{activityId}
      </if>
      <if test="failedActivityId != null">
        and RES.FAILED_ACTIVITY_ID_ = #{failedActivityId}
      </if>
      <if test="processInstanceId != null">
        and RES.PROC_INST_ID_ = #{processInstanceId}
      </if>
      <if test="processDefinitionId != null">
        and RES.PROC_DEF_ID_ = #{processDefinitionId}
      </if>
      <if test="!empty(processDefinitionKeys)">
	      and PROCDEF.KEY_ in
        <foreach item="item" index="index" collection="processDefinitionKeys"
                 open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="causeIncidentId != null">
        and RES.CAUSE_INCIDENT_ID_ = #{causeIncidentId}
      </if>
      <if test="rootCauseIncidentId != null">
        and RES.ROOT_CAUSE_INCIDENT_ID_ = #{rootCauseIncidentId}
      </if>
      <if test="configuration != null">
        and RES.CONFIGURATION_ = #{configuration}
      </if>
      
      <if test="!empty(tenantIds)">
        and RES.TENANT_ID_ in
        <foreach item="tenantId" index="index" collection="tenantIds"
                 open="(" separator="," close=")">
          #{tenantId}
        </foreach>
      </if>
      <if test="!empty(jobDefinitionIds)">
        and RES.JOB_DEF_ID_ in
        <foreach item="jobDefinitionId" index="index" collection="jobDefinitionIds"
                 open="(" separator="," close=")">
          #{jobDefinitionId}
        </foreach>
      </if>

      <if test="authCheck.shouldPerformAuthorizatioCheck and authCheck.authUserId != null">
        AND
          ( CASE

            WHEN
              <!-- incident exists in context of a process instance -->
              RES.PROC_DEF_ID_ is not null
            THEN
              (
              <bind name="authUserId" value="authCheck.authUserId" />
              <bind name="authGroupIds" value="authCheck.authGroupIds" />
              <bind name="permissionChecks" value="authCheck.permissionChecks" />
              <bind name="revokeAuthorizationCheckEnabled" value="authCheck.revokeAuthorizationCheckEnabled" />
              <include refid="Jabe\Impl\Persistence\Entity\AuthorizationEntity.authorizationCheck" />)

            ELSE
              1
          END ) = 1
      </if>

      <include refid="Jabe\Impl\Persistence\Entity\TenantEntity.queryTenantCheck" />

    </where>
  </sql>

  <update id="updateIncident" parameterType="Jabe\Impl\Persistence\Entity\IncidentEntity">
    update ${prefix}ACT_RU_INCIDENT
    <set>
      REV_ = #{revisionNext},
      EXECUTION_ID_ = #{executionId:VARCHAR},
      PROC_DEF_ID_ = #{processDefinitionId:VARCHAR},
      ACTIVITY_ID_ = #{activityId:VARCHAR},
      FAILED_ACTIVITY_ID_ = #{failedActivityId:VARCHAR},
      JOB_DEF_ID_ = #{jobDefinitionId:VARCHAR},
      ANNOTATION_ = #{annotation:VARCHAR}
    </set>
    <where>
      ID_ = #{id:VARCHAR}
      and REV_ = #{revision}
    </where>
  </update>

</mapper>