<?php

namespace Jabe;

use Jabe\Authorization\{
    Permissions,
    Resources
};
use Jabe\Form\{
    StartFormDataInterface,
    TaskFormDataInterface
};
use Jabe\Runtime\{
    ProcessInstanceInterface,
    ProcessInstanceQueryInterface
};
use Jabe\Task\{
    TaskInterface,
    TaskQueryInterface
};
use Jabe\Variable\VariableMapInterface;

interface FormServiceInterface
{
    /**
     * Retrieves all data necessary for rendering a form to start a new process instance.
     * This can be used to perform rendering of the forms outside of the process engine.
     *
     * @throws AuthorizationException
     *          If the user has no Permissions#READ permission on Resources#PROCESS_DEFINITION.
     */
    public function getStartFormData(?string $processDefinitionId): StartFormDataInterface;

    /**
     * Rendered form generated by the given build-in form engine for starting a new process instance.
     *
     * @throws AuthorizationException
     *          If the user has no Permissions#READ permission on Resources#PROCESS_DEFINITION.
     */
    public function getRenderedStartForm(?string $processDefinitionId, ?string $engineName = null);

    /**
     * Start a new process instance with the user data that was entered as properties in a start form.
     *
     * A business key can be provided to associate the process instance with a
     * certain identifier that has a clear business meaning. For example in an
     * order process, the business key could be an order id. This business key can
     * then be used to easily look up that process instance , see
     * ProcessInstanceQuery#processInstanceBusinessKey(String). Providing such a business
     * key is definitely a best practice.
     *
     * Note that a business key MUST be unique for the given process definition.
     * Process instance from different process definition are allowed to have the
     * same business key.
     *
     * @param processDefinitionId the id of the process definition, cannot be null.
     * @param businessKey a key that uniquely identifies the process instance in the context or the
     *                    given process definition.
     * @param properties the properties to pass, can be null.
     *
     * @throws AuthorizationException
     *          If the user has no Permissions#CREATE permission on Resources#PROCESS_INSTANCE
     *          and no Permissions#CREATE_INSTANCE permission on Resources#PROCESS_DEFINITION.
     */
    public function submitStartForm(?string $processDefinitionId, ?string $businessKey, array $properties): ProcessInstanceInterface;

    /**
     * Retrieves all data necessary for rendering a form to complete a task.
     * This can be used to perform rendering of the forms outside of the process engine.
     *
     * @throws AuthorizationException
     *          <p>In case of standalone tasks:
     *          <li>if the user has no Permissions#READ permission on Resources#TASK or</li>
     *          <li>if the user has no TaskPermissions#READ_VARIABLE permission on Resources#TASK</li></p>
     *          <p>In case the task is part of a running process instance:</li>
     *          <li>if the user has no Permissions#READ permission on Resources#TASK or
     *           no Permissions#READ_TASK permission on Resources#PROCESS_DEFINITION </li>
     *          <li>if the user has TaskPermissions#READ_VARIABLE permission on Resources#TASK or
     *          no ProcessDefinitionPermissions#READ_TASK_VARIABLE permission on Resources#PROCESS_DEFINITION
     *          when {@link ProcessEngineConfiguration#enforceSpecificVariablePermission this} config is enabled</li>
     *          </ul></p>
     */
    public function getTaskFormData(?string $taskId): TaskFormDataInterface;

    /**
     * Rendered form generated by the given build-in form engine for completing a task.
     *
     * @throws AuthorizationException
     *          <p>In case of standalone tasks:
     *          <li>if the user has no Permissions#READ permission on Resources#TASK or</li>
     *          <li>if the user has no TaskPermissions#READ_VARIABLE permission on Resources#TASK
     *          when {@link ProcessEngineConfiguration#enforceSpecificVariablePermission this} config is enabled</li></p>
     *          <p>In case the task is part of a running process instance:</li>
     *          <li>if the user has no Permissions#READ permission on Resources#TASK or
     *           no Permissions#READ_TASK permission on Resources#PROCESS_DEFINITION </li>
     *          <li>if the user has TaskPermissions#READ_VARIABLE permission on Resources#TASK or
     *          no ProcessDefinitionPermissions#READ_TASK_VARIABLE permission on Resources#PROCESS_DEFINITION
     *          when {@link ProcessEngineConfiguration#enforceSpecificVariablePermission this} config is enabled</li></p>
     */
    public function getRenderedTaskForm(?string $taskId, ?string $engineName = null);

    /**
     * Completes a task with the user data that was entered as properties in a task form.
     *
     * @param taskId
     * @param properties
     *
     * @throws AuthorizationException
     *          If the user has no Permissions#UPDATE permission on Resources#TASK
     *          or no Permissions#UPDATE_TASK permission on Resources#PROCESS_DEFINITION.
     */
    public function submitTaskForm(?string $taskId, array $properties): void;

    /**
     * Completes a task with the user data that was entered as properties in a task form.
     *
     * @param taskId
     * @param properties
     * @param deserializeValues if false, returned SerializableValues
     *   will not be deserialized (unless they are passed into this method as a
     *   deserialized value or if the BPMN process triggers deserialization)
     * @return a map of process variables
     *
     * @throws AuthorizationException
     *          If the user has no Permissions#UPDATE permission on Resources#TASK
     *          or no Permissions#UPDATE_TASK permission on Resources#PROCESS_DEFINITION.
     */
    public function submitTaskFormWithVariablesInReturn(?string $taskId, array $properties, bool $deserializeValues): VariableMapInterface;

    /**
     * Retrieves a list of requested variables for rendering a start from. The method takes into account
     * FormData specified for the start event. This allows defining default values for form fields.
     *
     * @param processDefinitionId the id of the process definition for which the start form should be retrieved.
     * @param formVariables a Collection of the names of the variables to retrieve. Allows restricting the set of retrieved variables.
     * @param deserializeObjectValues if false object values are not deserialized
     * @return a map of VariableInstances.
     *
     * @throws AuthorizationException
     *          If the user has no Permissions#READ permission on Resources#PROCESS_DEFINITION.
     */
    public function getStartFormVariables(?string $processDefinitionId, array $formVariables = [], bool $deserializeObjectValues = true): VariableMapInterface;

    /**
     * <p>Retrieves a list of requested variables for rendering a task form. In addition to the task variables and process variables,
     * the method takes into account FormData specified for the task. This allows defining default values for form fields.</p>
     *
     * <p>A variable is resolved in the following order:
     * <ul>
     *   <li>First, the method collects all form fields and creates variable instances for the form fields.</li>
     *   <li>Next, the task variables are collected.</li>
     *   <li>Next, process variables from the parent scopes of the task are collected, until the process instance scope is reached.</li>
     * </ul>
     * </p>
     *
     * @param taskId the id of the task for which the variables should be retrieved.
     * @param formVariables a Collection of the names of the variables to retrieve. Allows restricting the set of retrieved variables.
     * @param deserializeObjectValues if false object values are not deserialized
     * @return a map of VariableInstances.
     *
     * @throws AuthorizationException
     *          <p>In case of standalone tasks:
     *          <li>if the user has no Permissions#READ permission on Resources#TASK or</li>
     *          <li>if the user has no TaskPermissions#READ_VARIABLE permission on Resources#TASK
     *          when {@link ProcessEngineConfiguration#enforceSpecificVariablePermission this} config is enabled</li></p>
     *          <p>In case the task is part of a running process instance:</li>
     *          <li>if the user has no Permissions#READ permission on Resources#TASK or
     *           no Permissions#READ_TASK permission on Resources#PROCESS_DEFINITION </li>
     *          <li>if the user has TaskPermissions#READ_VARIABLE permission on Resources#TASK or
     *          no ProcessDefinitionPermissions#READ_TASK_VARIABLE permission on Resources#PROCESS_DEFINITION
     *          when {@link ProcessEngineConfiguration#enforceSpecificVariablePermission this} config is enabled</li></p>
     */
    public function getTaskFormVariables(?string $processDefinitionId, array $formVariables = [], bool $deserializeObjectValues = true): VariableMapInterface;

    /**
     * Retrieves a user defined reference to a start form.
     *
     * In the Explorer app, it is assumed that the form key specifies a resource
     * in the deployment, which is the template for the form.  But users are free
     * to use this property differently.
     *
     * @throws AuthorizationException
     *          If the user has no Permissions#READ permission on Resources#PROCESS_DEFINITION.
     */
    public function getStartFormKey(?string $processDefinitionId): ?string;

    /**
     * Retrieves a user defined reference to a task form.
     *
     * In the Explorer app, it is assumed that the form key specifies a resource
     * in the deployment, which is the template for the form.  But users are free
     * to use this property differently.
     *
     * Both arguments can be obtained from Task instances returned by any
     * TaskQuery.
     *
     * @throws AuthorizationException
     *          If the user has no Permissions#READ permission on Resources#PROCESS_DEFINITION.
     */
    public function getTaskFormKey(?string $processDefinitionId, ?string $taskDefinitionKey): ?string;

    /**
     * Retrieves a deployed start form for a process definition with a given id.
     *
     *
     * @throws AuthorizationException
     *          If the user has no Permissions#READ permission on Resources#PROCESS_DEFINITION.
     * @throws NotFoundException
     *          If the start form cannot be found.
     * @throws BadUserRequestException
     *          If the start form key has wrong format ("embedded:deployment:<path>" or "deployment:<path>" required).
     */
    public function getDeployedStartForm(?string $processDefinitionId);

    /**
     * Retrieves a deployed task form for a task with a given id.
     *
     *
     * @throws AuthorizationException
     *          If the user has no Permissions#READ permission on Resources#TASK.
     * @throws NotFoundException
     *          If the task form cannot be found.
     * @throws BadUserRequestException
     *          If the task form key has wrong format ("embedded:deployment:<path>" or "deployment:<path>" required).
     */
    public function getDeployedTaskForm(?string $taskId);
}
